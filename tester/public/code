<html><head><title>code.c</title><style type="text/css">ol{margin:0;padding:0}.c7{max-width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c0{font-size:14pt;background-color:#ffffff;font-family:"Courier New"}.c2{line-height:1.0;direction:ltr}.c1{margin:5px;border:1px solid black}.c5{padding-bottom:10pt}.c3{height:11pt}.c6{text-indent:36pt}.c4{direction:ltr}.title{padding-top:24pt;line-height:1.15;text-align:left;color:#000000;font-size:36pt;font-family:"Arial";font-weight:bold;padding-bottom:6pt}.subtitle{padding-top:18pt;line-height:1.15;text-align:left;color:#666666;font-style:italic;font-size:24pt;font-family:"Georgia";padding-bottom:4pt}li{color:#000000;font-size:11pt;font-family:"Arial"}p{color:#000000;font-size:11pt;margin:0;font-family:"Arial"}h1{padding-top:24pt;line-height:1.15;text-align:left;color:#000000;font-size:24pt;font-family:"Arial";font-weight:bold;padding-bottom:6pt}h2{padding-top:18pt;line-height:1.15;text-align:left;color:#000000;font-size:18pt;font-family:"Arial";font-weight:bold;padding-bottom:4pt}h3{padding-top:14pt;line-height:1.15;text-align:left;color:#000000;font-size:14pt;font-family:"Arial";font-weight:bold;padding-bottom:4pt}h4{padding-top:12pt;line-height:1.15;text-align:left;color:#000000;font-size:12pt;font-family:"Arial";font-weight:bold;padding-bottom:2pt}h5{padding-top:11pt;line-height:1.15;text-align:left;color:#000000;font-size:11pt;font-family:"Arial";font-weight:bold;padding-bottom:2pt}h6{padding-top:10pt;line-height:1.15;text-align:left;color:#000000;font-size:10pt;font-family:"Arial";font-weight:bold;padding-bottom:2pt}</style></head><body class="c7"><p class="c3 c4"><span></span></p><p class="c4"><span>h(k) = k % 7</span></p><p class="c5 c4"><span>8, 1, 9, 6, 13</span></p><p class="c5 c4"><span>##</span></p><p class="c2"><span class="c0">#include &lt;stdio.h&gt; &nbsp; &nbsp;//fighting</span></p><p class="c2"><span class="c0">#include &lt;stdlib.h&gt;</span></p><p class="c2"><span class="c0">#include &lt;time.h&gt;</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">#define SWAP(a, b, t) ((t) = (a), (a) = (b), (b) = (t))</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">int partition(int arr[], int left, int right) {</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int pivot = left;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int temp;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p class="c2 c6"><span class="c0">int low = left +</span><span class="c0">1</span><span class="c0">;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int high = right;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(right - left &gt; 2){</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SWAP(arr[left], arr[left + 2],temp);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (low &lt;= high)</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (pivot &gt;= arr[low] &amp;&amp; low &lt;= right ) </span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;low++;</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (pivot &lt;= arr[high] &amp;&amp; high &gt;= (left+1))</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;high--;</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(low &lt; high) </span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SWAP(arr[low], arr[high], temp);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SWAP(arr[left], arr[high], temp);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return high;</span></p><p class="c2"><span class="c0">}</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">void _quick_sort(int arr[], int left, int right) {</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int pivot;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(left &lt; right)</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pivot = partition(arr, left, right);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_quick_sort(arr, left, pivot - 1);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_quick_sort(arr, pivot + 1, right);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p class="c2"><span class="c0">}</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">void QuickSort(int arr[], int len) {</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clock_t time = clock();</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_quick_sort(arr, 0, len - 1);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time = clock() - time;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;%s time: %f sec\n&quot;, __func__, (double) time / CLOCKS_PER_SEC);</span></p><p class="c2"><span class="c0">}</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">int compare(const void *op1, const void *op2) {</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int *p1, *p2;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p1 = (int*) op1;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p2 = (int*) op2;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int n1 = *p1;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int n2 = *p2;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n1 - n2;</span></p><p class="c2"><span class="c0">}</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">void std_qsort(int arr[], int len) {</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clock_t time = clock();</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qsort(arr, len, sizeof(int), compare);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time = clock() - time;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;%s time: %f sec\n&quot;, __func__, (double) time / CLOCKS_PER_SEC);</span></p><p class="c2"><span class="c0">}</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">typedef enum ORDER {SORTED, RANDOM} ORDER;</span></p><p class="c2"><span class="c0">void genArray(int arr[], int n, ORDER s) {</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;srand(time(NULL));</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0 ; i &lt; n ; i++) {</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s == RANDOM)</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[i] = rand() &nbsp;% n;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arr[i] = i;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></p><p class="c2"><span class="c0">}</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">void printArray(int arr[], int n) {</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0 ; i &lt; n ; i++) </span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;%d\n&quot;, arr[i]);</span></p><p class="c2"><span class="c0">}</span></p><p class="c2"><span class="c0">#define LEN 100000</span></p><p class="c2"><span class="c0">int main() {</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//int a[LEN]; //not recommended because stack size &nbsp; &nbsp; &nbsp;</span></p><p class="c2 c6"><span class="c0">//is small // not enough minerals</span></p><p class="c2 c6"><span class="c0">int *a = (int *)calloc(LEN, sizeof(int));</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printArray(a, LEN);</span></p><p class="c2 c6"><span class="c0">genArray(a, LEN, RANDOM);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;QuickSort(a, LEN);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printArray(a, LEN);</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//genArray(a, LEN, ORDER);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//std_qsort(a, LEN);</span></p><p class="c2"><span class="c0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//printArray(a, LEN);</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2"><span class="c0">}</span></p><p class="c2 c3"><span class="c0"></span></p><p class="c2 c3"><span class="c0"></span></p><p class="c5 c3 c4"><span></span></p><p class="c4 c5"><span>##</span></p><p class="c2 c3"><span></span></p><sup><a href="#cmnt1" name="cmnt_ref1">[a]</a></sup><p class="c2 c3"><span></span></p><sup><a href="#cmnt2" name="cmnt_ref2">[b]</a></sup><p class="c2 c3"><span></span></p><sup><a href="#cmnt3" name="cmnt_ref3">[c]</a></sup><p class="c2 c3"><span></span></p><sup><a href="#cmnt4" name="cmnt_ref4">[d]</a></sup><div class="c1"><p class="c2"><a href="#cmnt_ref1" name="cmnt1">[a]</a><span>&#51060;&#44221;&#48124;:</span></p><p class="c2"><span>&#50864;&#50773;</span></p></div><div class="c1"><p class="c2"><a href="#cmnt_ref2" name="cmnt2">[b]</a><span>Anonymous:</span></p><p class="c2"><span>oh &nbsp; &nbsp; oh</span></p><p class="c2"><span>&nbsp;&#51088;&#47308;&#44396;&#51312;</span></p><p class="c2"><span>oh &nbsp; &nbsp; oh</span></p></div><div class="c1"><p class="c2"><a href="#cmnt_ref3" name="cmnt3">[c]</a><span>&#49324;&#54788;&#50864;:</span></p><p class="c2"><span>&#12615;&#12613;&#12615;</span></p></div><div class="c1"><p class="c2"><a href="#cmnt_ref4" name="cmnt4">[d]</a><span>David Jung:</span></p><p class="c2"><span>zz</span></p></div></body></html>